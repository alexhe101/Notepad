package application;

import javafx.fxml.FXML;
import javafx.scene.Node;
import javafx.scene.control.Button;

import javafx.scene.control.TextField;
import javafx.scene.text.Font;
import javafx.scene.text.FontPosture;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.Stage;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.function.Predicate;

import com.sun.javafx.css.converters.FontConverter.FontWeightConverter;
import com.sun.javafx.geom.BaseBounds;
import com.sun.javafx.geom.transform.BaseTransform;
import com.sun.javafx.jmx.MXNodeAlgorithm;
import com.sun.javafx.jmx.MXNodeAlgorithmContext;
import com.sun.javafx.sg.prism.NGNode;

import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.event.ActionEvent;

import javafx.scene.control.ListView;
import javafx.scene.control.TextArea;
import javafx.scene.control.Label;

import javafx.scene.control.ComboBox;

import javafx.scene.control.Hyperlink;

public class FontScreenController {

	@FXML
	private TextField fontTextField;
	@FXML
	private TextField styleTextField;
	@FXML
	private TextField sizeTextField;
	@FXML
	private ListView fontListView;
	@FXML
	private ListView styleListView;
	@FXML
	private ListView sizeListView;
	@FXML
	private Label sampleLabel;
	@FXML
	private Hyperlink link;
	@FXML
	private ComboBox scriptComboBox;
	@FXML
	private Button confirmButton;
	@FXML
	private Button cancelButton;
	private Boolean firstClick = true;
	private String currentFont;
	private int currentSize;
	private FontWeight currentFontWeight;
	private FontPosture currnetFontPosture;
	private TextArea mainTextArea;
	public void setMainTextArea(TextArea mainTextArea) {
		this.mainTextArea = mainTextArea;
	}
	private Node node = new Node() {
		public void requestFocus() {
		}

		@Override
		protected NGNode impl_createPeer() {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public BaseBounds impl_computeGeomBounds(BaseBounds bounds, BaseTransform tx) {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		protected boolean impl_computeContains(double localX, double localY) {
			// TODO Auto-generated method stub
			return false;
		}

		@Override
		public Object impl_processMXNode(MXNodeAlgorithm alg, MXNodeAlgorithmContext ctx) {
			// TODO Auto-generated method stub
			return null;
		}
	};

	// Event Listener on Hyperlink[#link].onAction
	@FXML
	public void clickLink(ActionEvent event) {
		// TODO Autogenerated
	}

	// Event Listener on Button[#confirmButton].onAction
	@FXML
	public void clickConfirmButton(ActionEvent event) {
		// TODO Autogenerated
		mainTextArea.setFont(Font.font(currentFont, currentFontWeight, currnetFontPosture, currentSize));
	}

	// Event Listener on Button[#cancelButton].onAction
	@FXML
	public void clickCancelButton(ActionEvent event) {
		// TODO Autogenerated
		Stage s = (Stage)cancelButton.getScene().getWindow();
		s.close();
	}

	public void initialize() {
        String sizeStr[] = { "8", "9", "10", "11", "12", "14", "16", "18", "20", "22",
                "24", "26", "28", "36", "48", "72", "初号", "小初", "一号", "小一", "二号", "小二", "三号", "小三", "四号", "小四", "五号",
                "小五", "六号", "小六", "七号", "八号" };
        int sizeValue[] = { 8, 9, 10, 11, 12, 14, 16, 18, 20, 22, 24, 26, 28, 36, 48, 72, 42, 36, 26, 24, 22, 18, 16,
                15, 14, 12, 11, 9, 8, 7, 6, 5 };
        sizeListView.setItems(FXCollections.observableArrayList(sizeStr));
        HashMap<String, Integer>sizeMap = new HashMap<String, Integer>();
        for(int i=0;i<sizeValue.length;i++)
        {
        	sizeMap.put(sizeStr[i],sizeValue[i]);
        }
        
        Text normal_regular = new Text("常规");
        Text bold_regular = new Text("加粗");
        Text normal_italic = new Text("斜体");
        Text bold_italic = new Text("粗斜体");
        ObservableList<Text> textStyle = FXCollections.observableArrayList(normal_regular, bold_regular, normal_italic, bold_italic);
        normal_regular.setFont(Font.font(Font.getDefault().getName(), FontWeight.NORMAL, FontPosture.REGULAR, Font
                .getDefault().getSize()));
        bold_regular.setFont(Font.font(Font.getDefault().getName(), FontWeight.BOLD, FontPosture.REGULAR, Font
                .getDefault().getSize()));
        normal_italic.setFont(Font.font(Font.getDefault().getName(), FontWeight.NORMAL, FontPosture.ITALIC, Font
                .getDefault().getSize()));
        bold_italic.setFont(Font.font(Font.getDefault().getName(), FontWeight.BOLD, FontPosture.ITALIC, Font
                .getDefault().getSize()));
        styleListView.setItems(textStyle);
        styleListView.getSelectionModel().selectFirst();
        currentFontWeight = FontWeight.NORMAL;
        currnetFontPosture = FontPosture.REGULAR;
        currentSize = 14;
        currentFont = "System";
        styleTextField.setText(textStyle.get(styleListView.getSelectionModel().getSelectedIndex()).getText());
        styleListView.getSelectionModel()
        .selectedItemProperty()
        .addListener(event ->
        {
            String value = textStyle.get(styleListView.getSelectionModel().getSelectedIndex()).getText();
            if (value.equals("常规"))
            {
                currentFontWeight = FontWeight.NORMAL;
                currnetFontPosture = FontPosture.REGULAR;
            }
                else if (value.equals("加粗"))
                {
                	currentFontWeight = FontWeight.BOLD;
                	currnetFontPosture = FontPosture.REGULAR;
                }
                else if (value.equals("斜体"))
                {
                	currentFontWeight = FontWeight.NORMAL;
                	currnetFontPosture = FontPosture.ITALIC;
                }
                else if (value.equals("粗斜体"))
                {
                	currentFontWeight = FontWeight.BOLD;
                	currnetFontPosture = FontPosture.ITALIC;
                }
                styleTextField.setText(value);
                // 更新预览文字字形效果
                sampleLabel.setFont(Font.font(currentFont, currentFontWeight,
                        currnetFontPosture,
                        currentSize));
            });
        
        
        sizeListView.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<String>() {

			@Override
			public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
				// TODO Auto-generated method stub
				sizeTextField.setText(newValue);
				currentSize =sizeMap.get(sizeListView.getSelectionModel().getSelectedItem());
				sampleLabel.setFont(Font.font(currentFont, currentFontWeight, currnetFontPosture, currentSize));
			}
		});
        sizeTextField.setText(""+currentSize);
        sampleLabel.setText("AaBbYyZz");
        
        
        
        
        
		List<String> fontFamily = Font.getFamilies();
		ObservableList<String> fontList = FXCollections.observableArrayList(fontFamily);
		fontListView.setItems(fontList);
		fontTextField.setFocusTraversable(false);
		fontListView.getSelectionModel().select(Font.getDefault().getName().split(" ")[0]);
				fontListView.scrollTo(fontListView.getSelectionModel().getSelectedIndex());
		fontTextField.setText(Font.getDefault().getName().split(" ")[0]);
		fontListView.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<String>() {
			@Override
			public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
				// TODO Auto-generated method stub
				if (fontTextField.isFocused() == false) {
					fontTextField.setText(newValue);
					currentFont = newValue;
					sampleLabel.setFont(Font.font(currentFont, currentFontWeight, currnetFontPosture, currentSize));
					//if(newValue.matches("[\\x00-\\xFF]+"))
					if(scriptComboBox.getSelectionModel().getSelectedIndex()==0&&newValue.matches("[\\x00-\\xFF]+"))
					{
						sampleLabel.setText("AaBbYyZz");
					}else {
						sampleLabel.setText("JVM中文软件");
						scriptComboBox.getSelectionModel().select(1);
					}
				}

			}
		});
		fontTextField.textProperty().addListener(new ChangeListener<String>() {

			@Override
			public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
				// TODO Auto-generated method stub
				if (fontTextField.isFocused()) {
					FilteredList<String> f = fontList.filtered(new Predicate<String>() {

						@Override
						public boolean test(String t) {
							// TODO Auto-generated method stub
							if (t.toLowerCase().contains(newValue.toLowerCase())) {
								return true;
							} else {

								return false;
							}
						}
					});

					if (f.size() > 0) {
						ArrayList<String> tmp = new ArrayList<String>(f);
						Collections.sort(tmp, new Comparator<String>() {

							@Override
							public int compare(String o1, String o2) {
								String o1String;
								String o2String;
								o1String = o1.toLowerCase();
								o2String = o2.toLowerCase();
								String testString = newValue.toLowerCase();
								// TODO Auto-generated method stub
								int preo1 = 0;
								int preo2 = 0;
								for (int i = 0; i < Math.min(o1String.length(), testString.length()); i++) {
									if (o1String.charAt(i) == testString.charAt(i)) {
										preo1++;
									}
								}
								for (int i = 0; i < Math.min(o2.length(), testString.length()); i++) {
									if (testString.charAt(i) == o2String.charAt(i)) {
										preo2++;
									}
								}
								if (preo1 != 0 || preo2 != 0) {
									return -(preo1 - preo2);
								} else {
									return o1String.indexOf(testString) - o2String.indexOf(testString);
								}
							}
						});
						fontListView.getSelectionModel().select(tmp.get(0));
						fontListView.scrollTo(fontListView.getSelectionModel().getSelectedIndex());
					}
				}

			}
		});
		
		scriptComboBox.setItems(FXCollections.observableArrayList("西欧文字","中文GB2312"));
		scriptComboBox.getSelectionModel().select(0);
		scriptComboBox.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<String>() {

			@Override
			public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
				// TODO Auto-generated method stub
				if(newValue.equalsIgnoreCase("西欧文字"))
				{
					sampleLabel.setText("AaBbYyZz");
				}else {
					sampleLabel.setText("JVM中文软件");
				}
			}
		});
	}
}
